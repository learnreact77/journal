2024-12-01

Established these React facts from wikipedia page
https://en.wikipedia.org/wiki/React_(software)

Use case:
To create single page applications (SPAs) 
with the help of Next.js

Ambition: 
to allow more seamless building of 
websites based on components.

Scope/Concern: 
is only concerned with rendering of 
components to the screen.
Relies on external libraries for 
things like routing*

Chief advantage:
Only triggers re-render actions on 
screen elements that have changed - avoiding
full-page reloads.

Developed by:
Meta/Facebook. Now open source.

Coding Paradigm:
Declarative, rather than imperative.
"Developers design views for each state of an application, and React updates and renders components when data changes"

Architecture:
Components, which are modular and reusable.
These can be Functional Components or Class Components.
Class components were originally necessary for full functionality, but
Functional components are now favoured:

"The introduction of React Hooks with React 16.8 in February 2019 allowed 
developers to manage state and lifecycle behaviors within functional components."
"This trend aligns with the broader industry movement towards functional 
programming and modular design."

Language:
Pure Javascript or (more usually) JSX

What is JSX:
 - An extension of pure JS. 
 - It is the format always returned from Functional Components.
 - It allows the inclusion of structures similar to xml/html within JS,
including nodes that can be structured in a hierarchy, and attributes.
 - The node types typically found in html are supported, such as div, p, span.
 - attribute names from html are also supported
 - attribute values can be JS expressions in curly parentheses
 - custom nodes can be defined, whose definitions are provided by react components
 - attributes added to custom nodes within a JSX structure are passed to these components as props.
Typically a JS function will be defined and its return value will be JSX
in parentheses (). @see https://en.wikipedia.org/wiki/JSX_(JavaScript)

*routing: this is concerned with the navigation of networks.
The concern with React is page routing, since react does not include it.
Given a path /street/house/room, navigation works from the street node 
down the room node. 
In a multi-page applcation this path would map onto a folder
structure with pages as html files.
In single page applications, we need to control this virtually 
by defining a set of routes.
Among other things this solves the problem of controlling the 
behavior of browser navigation, including 
the behaviour of forward/back buttons.
In a single page app (SPA) such as 
are created with React, where few 'full page 
reloads' take place, it becomes necessary 
to take control of page routing.
In React, page routing is typically provided by React Router:
https://www.w3schools.com/react/react_router.asp

Next: 

 - Do the 'Git pages' tutorial:https://github.com/skills/github-pages

 - investigate Next.js

 - listen to Modern React audio on Spotify

2024-12-02

Did the Github pages tutorial.
The page I created uses Jekyll, which is driven by Jekyll Frontmatter. 
Documentation for this is here:
https://jekyllrb.com/docs/frontmatter/
Jekyll was mentioned on https://en.wikipedia.org/wiki/Server-side_scripting#Server-side_rendering
Under 'static site generation tools'.

I actually messed this up a bit, adding the _posts directory under the .github folder instead of at the top level. 
This meant that github actiosn stopped updating the readme with the next step.
Luckily I was able to work out how github actions wored and read what the next step needed to be.

I had to download github destop (https://desktop.github.com/download/) to delete this extra .github/_posts folder. 

Next:

Make a new version of this journal repo that uses jekyll and github pages?

investigate Next.js jekyll stack to make a Rules Tool.

listen to Modern React audio on Spotify

Create a 'Rules Tool' using React.
(First: Design the Rules Tool)



 
